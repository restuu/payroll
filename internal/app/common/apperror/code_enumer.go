// Code generated by "enumer -type=Code -json -transform=kebab -trimprefix Code"; DO NOT EDIT.

package apperror

import (
	"encoding/json"
	"fmt"
	"strings"
)

const (
	_CodeName_0      = "bad-requestunauthorizedforbiddennot-foundconflict"
	_CodeLowerName_0 = "bad-requestunauthorizedforbiddennot-foundconflict"
	_CodeName_1      = "internal-server-error"
	_CodeLowerName_1 = "internal-server-error"
)

var (
	_CodeIndex_0 = [...]uint8{0, 11, 23, 32, 41, 49}
	_CodeIndex_1 = [...]uint8{0, 21}
)

func (i Code) String() string {
	switch {
	case 1 <= i && i <= 5:
		i -= 1
		return _CodeName_0[_CodeIndex_0[i]:_CodeIndex_0[i+1]]
	case i == 9999:
		return _CodeName_1
	default:
		return fmt.Sprintf("Code(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CodeNoOp() {
	var x [1]struct{}
	_ = x[BadRequest-(1)]
	_ = x[Unauthorized-(2)]
	_ = x[Forbidden-(3)]
	_ = x[NotFound-(4)]
	_ = x[Conflict-(5)]
	_ = x[InternalServerError-(9999)]
}

var _CodeValues = []Code{BadRequest, Unauthorized, Forbidden, NotFound, Conflict, InternalServerError}

var _CodeNameToValueMap = map[string]Code{
	_CodeName_0[0:11]:       BadRequest,
	_CodeLowerName_0[0:11]:  BadRequest,
	_CodeName_0[11:23]:      Unauthorized,
	_CodeLowerName_0[11:23]: Unauthorized,
	_CodeName_0[23:32]:      Forbidden,
	_CodeLowerName_0[23:32]: Forbidden,
	_CodeName_0[32:41]:      NotFound,
	_CodeLowerName_0[32:41]: NotFound,
	_CodeName_0[41:49]:      Conflict,
	_CodeLowerName_0[41:49]: Conflict,
	_CodeName_1[0:21]:       InternalServerError,
	_CodeLowerName_1[0:21]:  InternalServerError,
}

var _CodeNames = []string{
	_CodeName_0[0:11],
	_CodeName_0[11:23],
	_CodeName_0[23:32],
	_CodeName_0[32:41],
	_CodeName_0[41:49],
	_CodeName_1[0:21],
}

// CodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CodeString(s string) (Code, error) {
	if val, ok := _CodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Code values", s)
}

// CodeValues returns all values of the enum
func CodeValues() []Code {
	return _CodeValues
}

// CodeStrings returns a slice of all String values of the enum
func CodeStrings() []string {
	strs := make([]string, len(_CodeNames))
	copy(strs, _CodeNames)
	return strs
}

// IsACode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Code) IsACode() bool {
	for _, v := range _CodeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Code
func (i Code) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Code
func (i *Code) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Code should be a string, got %s", data)
	}

	var err error
	*i, err = CodeString(s)
	return err
}
