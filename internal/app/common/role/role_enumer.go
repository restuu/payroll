// Code generated by "enumer -type=Role -sql -json -transform=upper"; DO NOT EDIT.

package role

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _RoleName = "SUPERUSERADMINUSER"

var _RoleIndex = [...]uint8{0, 9, 14, 18}

const _RoleLowerName = "superuseradminuser"

func (i Role) String() string {
	if i < 0 || i >= Role(len(_RoleIndex)-1) {
		return fmt.Sprintf("Role(%d)", i)
	}
	return _RoleName[_RoleIndex[i]:_RoleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RoleNoOp() {
	var x [1]struct{}
	_ = x[SUPERUSER-(0)]
	_ = x[ADMIN-(1)]
	_ = x[USER-(2)]
}

var _RoleValues = []Role{SUPERUSER, ADMIN, USER}

var _RoleNameToValueMap = map[string]Role{
	_RoleName[0:9]:        SUPERUSER,
	_RoleLowerName[0:9]:   SUPERUSER,
	_RoleName[9:14]:       ADMIN,
	_RoleLowerName[9:14]:  ADMIN,
	_RoleName[14:18]:      USER,
	_RoleLowerName[14:18]: USER,
}

var _RoleNames = []string{
	_RoleName[0:9],
	_RoleName[9:14],
	_RoleName[14:18],
}

// RoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RoleString(s string) (Role, error) {
	if val, ok := _RoleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RoleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Role values", s)
}

// RoleValues returns all values of the enum
func RoleValues() []Role {
	return _RoleValues
}

// RoleStrings returns a slice of all String values of the enum
func RoleStrings() []string {
	strs := make([]string, len(_RoleNames))
	copy(strs, _RoleNames)
	return strs
}

// IsARole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Role) IsARole() bool {
	for _, v := range _RoleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Role
func (i Role) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Role
func (i *Role) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Role should be a string, got %s", data)
	}

	var err error
	*i, err = RoleString(s)
	return err
}

func (i Role) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Role) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Role: %[1]T(%[1]v)", value)
	}

	val, err := RoleString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
