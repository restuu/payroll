// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

type AttendanceType string

const (
	AttendanceTypeCLOCKIN     AttendanceType = "CLOCK_IN"
	AttendanceTypeCLOCKOUT    AttendanceType = "CLOCK_OUT"
	AttendanceTypeOVERTIMEIN  AttendanceType = "OVERTIME_IN"
	AttendanceTypeOVERTIMEOUT AttendanceType = "OVERTIME_OUT"
)

func (e *AttendanceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AttendanceType(s)
	case string:
		*e = AttendanceType(s)
	default:
		return fmt.Errorf("unsupported scan type for AttendanceType: %T", src)
	}
	return nil
}

type NullAttendanceType struct {
	AttendanceType AttendanceType
	Valid          bool // Valid is true if AttendanceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAttendanceType) Scan(value interface{}) error {
	if value == nil {
		ns.AttendanceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AttendanceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAttendanceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AttendanceType), nil
}

func (e AttendanceType) Valid() bool {
	switch e {
	case AttendanceTypeCLOCKIN,
		AttendanceTypeCLOCKOUT,
		AttendanceTypeOVERTIMEIN,
		AttendanceTypeOVERTIMEOUT:
		return true
	}
	return false
}

type RoleType string

const (
	RoleTypeADMIN RoleType = "ADMIN"
	RoleTypeUSER  RoleType = "USER"
)

func (e *RoleType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoleType(s)
	case string:
		*e = RoleType(s)
	default:
		return fmt.Errorf("unsupported scan type for RoleType: %T", src)
	}
	return nil
}

type NullRoleType struct {
	RoleType RoleType
	Valid    bool // Valid is true if RoleType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoleType) Scan(value interface{}) error {
	if value == nil {
		ns.RoleType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoleType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoleType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoleType), nil
}

func (e RoleType) Valid() bool {
	switch e {
	case RoleTypeADMIN,
		RoleTypeUSER:
		return true
	}
	return false
}

type Attendance struct {
	ID         int64          `db:"id"`
	EmployeeID int32          `db:"employee_id"`
	Timestamp  time.Time      `db:"timestamp"`
	Type       AttendanceType `db:"type"`
	Date       pgtype.Date    `db:"date"`
	CreatedAt  time.Time      `db:"created_at"`
	CreatedBy  string         `db:"created_by"`
	UpdatedAt  time.Time      `db:"updated_at"`
	UpdatedBy  string         `db:"updated_by"`
}

type Employee struct {
	ID        int32           `db:"id"`
	Username  string          `db:"username"`
	Password  string          `db:"password"`
	Salary    decimal.Decimal `db:"salary"`
	CreatedAt time.Time       `db:"created_at"`
	CreatedBy string          `db:"created_by"`
	UpdatedAt time.Time       `db:"updated_at"`
	UpdatedBy string          `db:"updated_by"`
}

type EmployeeRole struct {
	EmployeeID int32     `db:"employee_id"`
	RoleID     int32     `db:"role_id"`
	CreatedAt  time.Time `db:"created_at"`
	CreatedBy  string    `db:"created_by"`
	UpdatedAt  time.Time `db:"updated_at"`
	UpdatedBy  string    `db:"updated_by"`
}

type Role struct {
	ID        int32     `db:"id"`
	Name      RoleType  `db:"name"`
	CreatedAt time.Time `db:"created_at"`
	CreatedBy string    `db:"created_by"`
	UpdatedAt time.Time `db:"updated_at"`
	UpdatedBy string    `db:"updated_by"`
}
