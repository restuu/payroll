// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"payroll/internal/app"
	"payroll/internal/app/attendance/service"
	"payroll/internal/app/auth/repository"
	service2 "payroll/internal/app/auth/service"
	"payroll/internal/infrastructure/config"
	"payroll/internal/infrastructure/database/postgres"
	"payroll/internal/infrastructure/log"
	"payroll/internal/presentation/router"
	"payroll/internal/presentation/server"
)

// Injectors from wire.go:

func NewWebServer() (*WebServer, error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, err
	}
	serverConfig := configConfig.Server
	logger := log.SetDefaultLogger(configConfig)
	databaseConfig := configConfig.Database
	querier, err := postgres.Connect(databaseConfig)
	if err != nil {
		return nil, err
	}
	attendanceService := service.NewAttendanceService(querier)
	authConfig := configConfig.Auth
	authRepository := repository.NewAuthRepository(querier)
	authService := service2.NewAuthService(authConfig, authRepository)
	services := &app.Services{
		AttendanceService: attendanceService,
		AuthService:       authService,
	}
	chiRouter := router.NewRouter(configConfig, logger, services)
	httpServer := server.NewServer(serverConfig, chiRouter)
	webServer := &WebServer{
		cfg: configConfig,
		srv: httpServer,
	}
	return webServer, nil
}
